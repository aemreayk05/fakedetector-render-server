import { manipulateAsync, SaveFormat } from 'expo-image-manipulator';
import SightengineService from './SightengineService.js';

// ========================================
// üî• DUAL MODEL SERVICE
// Sightengine API + Haywoodsloan Server
// ========================================

// Analiz modlarƒ±
const ANALYSIS_MODES = {
  SIGHTENGINE: 'sightengine',
  HAYWOODSLOAN: 'haywoodsloan'
};

class ModelService {
  constructor() {
    console.log('üöÄ ModelService ba≈ülatƒ±lƒ±yor - Dual Model Ready');
    this.sightengineService = SightengineService;
    this.currentMode = ANALYSIS_MODES.SIGHTENGINE; // Varsayƒ±lan
    this.haywoodsloanServerUrl = null;
    
    // Render sunucu URL'si (deploy tamamlandƒ±ktan sonra g√ºncellenecek)
    this.RENDER_SERVER_URL = "https://fakedetector-haywoodsloan.onrender.com";
  }

  // ===== MAIN ANALYSIS METHOD =====
  async analyzeImage(imageUri) {
    try {
      console.log(`üîç ${this.currentMode.toUpperCase()} ile g√∂rsel analizi ba≈ülƒ±yor...`);
      const startTime = Date.now();

      // 1. G√∂rseli i≈üle (resize yok, %100 kalite)
      const base64Image = await this.preprocessImage(imageUri);

      // 2. Se√ßili mode'a g√∂re analiz yap
      let result;
      if (this.currentMode === ANALYSIS_MODES.SIGHTENGINE) {
        result = await this.analyzeWithSightengine(base64Image);
      } else if (this.currentMode === ANALYSIS_MODES.HAYWOODSLOAN) {
        result = await this.analyzeWithHaywoodsloan(base64Image);
      } else {
        throw new Error('Ge√ßersiz analiz modu');
      }

      // 3. Sonucu formatla
      const totalTime = Date.now() - startTime;
      const formattedResult = {
        ...result,
        analysisMode: this.currentMode,
        totalProcessingTime: totalTime,
        timestamp: Date.now()
      };

      console.log('‚úÖ Analiz tamamlandƒ±:', formattedResult.prediction, `(${formattedResult.confidence}%)`);
      return formattedResult;

    } catch (error) {
      console.error('‚ùå Analiz hatasƒ±:', error);
      throw new Error(`Analiz ba≈üarƒ±sƒ±z: ${error.message}`);
    }
  }

  // ===== SIGHTENGINE ANALYSIS =====
  async analyzeWithSightengine(base64Image) {
    console.log('üî• Sightengine API analizi ba≈ülƒ±yor...');
    const result = await this.sightengineService.analyzeImage(base64Image);
    
    // Doƒüru confidence deƒüerini hesapla
    let correctConfidence = result.confidence;
    
    // Eƒüer prediction "Ger√ßek" ise, ger√ßek olma oranƒ±nƒ± al
    if (result.prediction === 'Ger√ßek' && result.probabilities) {
      correctConfidence = result.probabilities.real;
    }
    // Eƒüer prediction "Sahte" ise, sahte olma oranƒ±nƒ± al
    else if (result.prediction === 'Sahte' && result.probabilities) {
      correctConfidence = result.probabilities.fake;
    }
    
    return {
      ...result,
      confidence: correctConfidence
    };
  }

  // ===== HAYWOODSLOAN ANALYSIS =====
  async analyzeWithHaywoodsloan(base64Image) {
    console.log('ü§ñ Haywoodsloan Server analizi ba≈ülƒ±yor...');
    
    // Render sunucu URL'sini kullan (kullanƒ±cƒ± ayarlamadƒ±ysa)
    const serverUrl = this.haywoodsloanServerUrl || this.RENDER_SERVER_URL;
    
    if (!serverUrl) {
      throw new Error('Haywoodsloan server URL ayarlanmamƒ±≈ü');
    }

    try {
      const response = await fetch(`${serverUrl}/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          image: base64Image
        })
      });

      if (!response.ok) {
        throw new Error(`Server hatasƒ±: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Server analiz hatasƒ±');
      }

      // Doƒüru confidence deƒüerini hesapla
      let correctConfidence = result.confidence;
      
      // Eƒüer prediction "Ger√ßek" ise, ger√ßek olma oranƒ±nƒ± al
      if ((result.prediction === 'Ger√ßek' || result.prediction === 'Gercek') && result.probabilities) {
        correctConfidence = result.probabilities.real;
      }
      // Eƒüer prediction "Sahte" ise, sahte olma oranƒ±nƒ± al
      else if (result.prediction === 'Sahte' && result.probabilities) {
        correctConfidence = result.probabilities.fake;
      }

      // Haywoodsloan sonucunu formatla
      return {
        success: true,
        prediction: result.prediction,
        prediction_en: result.prediction_en,
        confidence: correctConfidence,
        raw_score: result.raw_score,
        processing_time: result.processing_time,
        model_used: result.model_used,
        model_author: result.model_author,
        probabilities: result.probabilities,
        model_info: result.model_info
      };

    } catch (error) {
      console.error('‚ùå Haywoodsloan server hatasƒ±:', error);
      throw new Error(`Haywoodsloan analizi ba≈üarƒ±sƒ±z: ${error.message}`);
    }
  }

  // ===== IMAGE PREPROCESSING =====
  async preprocessImage(imageUri) {
    try {
      console.log('üì∏ G√∂rsel i≈üleniyor - Orijinal kalite korunuyor...');
      
      // Sightengine i√ßin: Resize YOK, compress YOK, %100 kalite
      const manipulatedImage = await manipulateAsync(
        imageUri,
        [], // Resize yok - orijinal boyut
        { 
          format: SaveFormat.JPEG, 
          compress: 1.0,  // %100 kalite
          base64: true 
        }
      );

      console.log('‚úÖ G√∂rsel i≈üleme tamamlandƒ±:', {
        width: manipulatedImage.width,
        height: manipulatedImage.height,
        base64Length: manipulatedImage.base64?.length || 0
      });
      
      return manipulatedImage.base64;
    } catch (error) {
      console.error('‚ùå G√∂rsel i≈üleme hatasƒ±:', error);
      throw new Error('G√∂rsel i≈ülenemedi');
    }
  }

  // ===== HEALTH & STATUS =====
  async checkHealth() {
    if (this.currentMode === ANALYSIS_MODES.SIGHTENGINE) {
      return await this.sightengineService.checkHealth();
    } else if (this.currentMode === ANALYSIS_MODES.HAYWOODSLOAN) {
      return await this.checkHaywoodsloanHealth();
    }
    return { status: 'unknown', mode: this.currentMode };
  }

  async checkHaywoodsloanHealth() {
    const serverUrl = this.haywoodsloanServerUrl || this.RENDER_SERVER_URL;
    
    if (!serverUrl) {
      return { status: 'error', error: 'Server URL ayarlanmamƒ±≈ü' };
    }

    try {
      const response = await fetch(`${serverUrl}/health`);
      if (response.ok) {
        const data = await response.json();
        return { 
          status: 'healthy', 
          mode: 'haywoodsloan',
          model: data.model_name,
          device: data.device || 'unknown'
        };
      } else {
        return { status: 'error', error: `Server hatasƒ±: ${response.status}` };
      }
    } catch (error) {
      return { status: 'error', error: error.message };
    }
  }

  async getModelInfo() {
    if (this.currentMode === ANALYSIS_MODES.SIGHTENGINE) {
      return {
        ...this.sightengineService.getUsageInfo(),
        mode: 'Sightengine API',
        status: 'ready',
        note: 'Production-ready AI detection'
      };
    } else if (this.currentMode === ANALYSIS_MODES.HAYWOODSLOAN) {
      return {
        mode: 'Haywoodsloan Server',
        status: this.haywoodsloanServerUrl ? 'ready' : 'not_configured',
        model: 'haywoodsloan/ai-image-detector-deploy',
        type: 'SwinV2 (Swin Transformer V2)',
        size: '781 MB',
        note: 'Open-source AI detection model'
      };
    }
  }

  // ===== MODE MANAGEMENT =====
  getCurrentMode() {
    return this.currentMode;
  }

  getModeDescription() {
    if (this.currentMode === ANALYSIS_MODES.SIGHTENGINE) {
      return 'Sightengine Professional API - Y√ºksek doƒüruluk, ticari kullanƒ±m';
    } else if (this.currentMode === ANALYSIS_MODES.HAYWOODSLOAN) {
      return 'Haywoodsloan SwinV2 Model - Open-source, g√º√ßl√º AI detection';
    }
    return 'Bilinmeyen mod';
  }

  setAnalysisMode(mode) {
    if (mode === ANALYSIS_MODES.SIGHTENGINE || mode === ANALYSIS_MODES.HAYWOODSLOAN) {
      this.currentMode = mode;
      console.log(`‚úÖ Analiz modu deƒüi≈ütirildi: ${mode}`);
      return true;
    }
    console.log('‚ùå Ge√ßersiz analiz modu:', mode);
    return false;
  }

  setHaywoodsloanServerUrl(url) {
    this.haywoodsloanServerUrl = url;
    console.log(`‚úÖ Haywoodsloan server URL ayarlandƒ±: ${url}`);
  }
  
  setDemoMode(enabled) { 
    console.log('‚ö†Ô∏è Demo mode devre dƒ±≈üƒ± - sadece Sightengine kullanƒ±lƒ±yor'); 
  }
  
  async getServicesStatus() {
    return {
      sightengine: { available: true, status: 'ready' },
      current_mode: 'sightengine'
    };
  }
}

export default new ModelService(); 